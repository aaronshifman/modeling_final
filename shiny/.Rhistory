x_0 <- 0
y_0 <- 0
x_dot <- function(x,y,a,z) return(x*(a+x)*(1-x) - y + z)
y_dot <- function(x,y,b,c) return(b*x - c*y)
for(ix in 1:(length(times)-1)){
t <- ix
x[ix+1] <- x[ix]+(dt*x_dot(x[ix], y[ix], a, z))
y[ix+1] <- y[ix]+(dt*y_dot(x[ix], y[ix], b, c))
}
# quick plot
plot(1:length(times), x, ylim = c(-2, 2), "l", col="green", main = "Neuron 1", xlab = "Time (seconds)"); lines(y, col="blue")
#!/usr/bin/Rscript
### def var
a <- 0.01
b <- 0.5
c <- 0.01
z <- 0.5
dt <- 0.04
tmax <- 100
times <- seq(0, tmax, by = dt)
x <- unlist(list(rep(0, 100)))
y <- unlist(list(rep(0, 100)))
x_0 <- 0
y_0 <- 0
x_dot <- function(x,y,a,z) return(x*(a+x)*(1-x) - y + z)
y_dot <- function(x,y,b,c) return(b*x - c*y)
for(ix in 1:(length(times)-1)){
t <- ix
x[ix+1] <- x[ix]+(dt*x_dot(x[ix], y[ix], a, z))
y[ix+1] <- y[ix]+(dt*y_dot(x[ix], y[ix], b, c))
}
# quick plot
plot(1:length(times), x, ylim = c(-2, 2), "l", col="green", main = "Neuron 1", xlab = "Time (seconds)"); lines(y, col="blue")
y_dot(1, 2, 0.5, 0.01)
#!/usr/bin/Rscript
### def var
a <- 0.01
b <- 0.5
c <- 0.01
z <- 0.5
dt <- 0.04
tmax <- 100
times <- seq(0, tmax, by = dt)
x <- unlist(list(rep(0, 100)))
y <- unlist(list(rep(0, 100)))
x_0 <- 0
y_0 <- 0
x_dot <- function(x,y,a,z) return(x*(a+x)*(1-x) - y + z)
y_dot <- function(x,y,b,c) return(b*x - c*y)
for(ix in 1:(length(times)-1)){
t <- ix
x[ix+1] <- x[ix]+(dt*x_dot(x[ix], y[ix], a, z))
y[ix+1] <- y[ix]+(dt*y_dot(x[ix], y[ix], b, c))
}
# quick plot
plot(1:length(times), x, ylim = c(-1, 1.5), "l", col="green", main = "Neuron 1", xlab = "Time (seconds)"); lines(y, col="blue")
#!/usr/bin/Rscript
### def var
a <- 0.01
b <- 0.5
c <- 0.01
z <- 0.5
dt <- 0.04
tmax <- 100
times <- seq(0, tmax, by = dt)
x <- unlist(list(rep(0, 100)))
y <- unlist(list(rep(0, 100)))
x_0 <- 0
y_0 <- 0
x_dot <- function(x,y,a,z) return(x*(a+x)*(1-x) - y + z)
y_dot <- function(x,y,b,c) return(b*x - c*y)
for(ix in 1:(length(times)-1)){
t <- ix
x[ix+1] <- x[ix]+(dt*x_dot(x[ix], y[ix], a, z))
y[ix+1] <- y[ix]+(dt*y_dot(x[ix], y[ix], b, c))
}
# quick plot
plot(1:length(times), x, ylim = c(-1, 1.5), "l", col="blue", main = "Neuron 1", xlab = "Time (seconds)"); lines(y, col="green")
#!/usr/bin/Rscript
### def var
a <- 0.01
b <- 0.5
c <- 0.01
z <- 0.5
dt <- 0.004
tmax <- 100
times <- seq(0, tmax, by = dt)
x <- unlist(list(rep(0, 100)))
y <- unlist(list(rep(0, 100)))
x_0 <- 0
y_0 <- 0
x_dot <- function(x,y,a,z) return(x*(a+x)*(1-x) - y + z)
y_dot <- function(x,y,b,c) return(b*x - c*y)
for(ix in 1:(length(times)-1)){
t <- ix
x[ix+1] <- x[ix]+(dt*x_dot(x[ix], y[ix], a, z))
y[ix+1] <- y[ix]+(dt*y_dot(x[ix], y[ix], b, c))
}
# quick plot
plot(1:length(times), x, ylim = c(-1, 1.5), "l", col="blue", main = "Neuron 1", xlab = "Time (seconds)"); lines(y, col="green")
## other options for ODE solver
# stiff solver
# ode45
# ode15s
(0.3189319)^2
version()
citation()
r<-citation()
r
library("phaseR")
install.packages("phaseR")
library(phaseR)
SIR(t = 10,y = c(5,5))
SIR(t = 10,y = c(5,5), parameters = c(0.5, 1))
for(i in 1:100){
r[[i]] <- SIR(t = i,y = c(5,5), parameters = c(0.5, 1))
}
r <- list()
for(i in 1:100){
r[[i]] <- SIR(t = i,y = c(5,5), parameters = c(0.5, 1))
}
plot(r, 1:100)
plot(r, 1:100)
r
x <- list()
y <- list()
for(i in 2:100){
r[[i]] <- SIR(t = i,y = c(x[[i-1]],y[[i-1]]), parameters = c(0.5, 1))
}
x[[1]] <- 100
y[[1]] <- 100
for(i in 2:100){
c(x[[i]], y[[i]]) <- SIR(t = i,y = c(x[[i-1]],y[[i-1]]), parameters = c(0.5, 1))
}
for(i in 2:100){
c(x[[i]], y[[i]]) <- unlist(SIR(t = i,y = c(x[[i-1]],y[[i-1]]), parameters = c(0.5, 1)))
}
for(i in 2:100){
x[[i]], y[[i]] <- unlist(SIR(t = i,y = c(x[[i-1]],y[[i-1]]), parameters = c(0.5, 1)))
}
for(i in 2:100){
r[[i]] <- unlist(SIR(t = i,y = c(x[[i-1]],y[[i-1]]), parameters = c(0.5, 1)))
x[[i]] <- r[i][1]
x[[i]] <- r[i][2]
}
x
y
r
r[1][2]
r[2][2]
for(i in 2:100){
r[[i]] <- unlist(SIR(t = i,y = c(x[[i-1]],y[[i-1]]), parameters = c(0.5, 1)))
x[[i]] <- r[[i]][1]
x[[i]] <- r[{i}][2]
}
for(i in 2:100){
r[[i]] <- unlist(SIR(t = i,y = c(x[[i-1]],y[[i-1]]), parameters = c(0.5, 1)))
x[[i]] <- r[[i]][1]
x[[i]] <- r[[i]][2]
}
names(mtcars)
colnames(mtcars)
setwd("../Downloads/")
y <- read.table("jointGwasMc_HDL.txt", h = T)
library(data.table)
y <- fread("jointGwasMc_HDL.txt", h = T)
fdsfsaldj
ls
r <- mtcars
r
View(r)
lm(mpg ~ hp, data = r)
lm(mpg ~ hp, data = r) %>% summary()
library(dplyr)
lm(mpg ~ hp, data = r) %>% summary()
plot(mtcars$mpg, mtcars$hp)
plot(mtcars$mpg. mtcars$hp)
plot(mtcars$mpg, mtcars$hp)
clear
cl
clear()
cls
cls()
mtcars
r <- mtcars
t.test(mpg, cyl, data = r)
t.test(r$mpg, r$cyl)
list.files()
setwd("~/Desktop/")
read.csv("test.csv", header = TRUE)
lab <- read.csv("test.csv", header = TRUE)
lab
t.test(lab$controls, lab$case1)
t.test(lab$controls, lab$case2)
t.test(lab$controls, lab$case3)
plot(r$control, r$case1)
plot(lab$control, lab$case1)
lba
lab
lm(lab$controls ~ lab$case1)
lm(lab$controls ~ lab$case1) %>% summary()
source('~/.active-rstudio-document', echo=TRUE)
setwd("../repos/modeling_final/shiny/")
library(shiny)
install.packages("ggvis")
library(ggvis)
runApp()
runApp()
z <- vector(length=10)
z
z[1] <- 50
z
z[1:3] <- 50
z
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?with
install.packages("deSolve")
library(deSolve)
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
clear()
library(deSolve)
library(deSolve)
model <- function (time, y, parms) {
with(as.list(c(y, parms)), {
dN <- r * N * (1 - N / K)
list(dN)
})
}
y <- c(N = 0.1)
parms <- c(r = 0.1, K = 10)
times <- seq(0, 100, 1)
out <- ode(y, times, model, parms)
plot(out)
y
N <- 0.1
y <- c(N = N)
y
alpha <- input$alpha
g <- input$g #need to put this in the ui
a <- input$a
b <- input$b
c <- input$c
dt <- input$dt
alpha <- 0
g <- 0.5
a <- 0.05
b <- 0.05
c <- 0.1
t <- 100
xi[1] <- 0
xi <- vector()
yi <- vector()
ti <- vector()
#second neuron
xi2 <- vector()
yi2 <- vector()
xi[1] <- 0
yi[1] <- 0
xi2[1] <- 0
yi2[1] <- 0
times <- seq(0, t, by = 0.01)
parameters <- c(a=a, b=b, c=c, alpha=alpha, g=g, z=z)
state <- c(xi[1], yi[1], xi2[1], yi2[1])
ode(y = state, times, func = FN, parameters)
FN <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
#rate of change
dx <- x*(a+x)*(1-x) - y + (1 - alpha)*g*(x - x2) + z
dy <- b*x - c*y
dx2 <- x2*(a+x2)*(1-x2) - y2 + (1 - alpha)*g*(x2 - x) + z
dy2 <- b*x2 - c*y2
# return the rate of change
list(c(dx, dy, dx2, dy2))
})
}
ode(y = state, times, func = FN, parameters)
FN <- function(times, state, parameters) {
with(as.list(c(state, parameters)), {
#rate of change
dx <- x*(a+x)*(1-x) - y + (1 - alpha)*g*(x - x2) + z
dy <- b*x - c*y
dx2 <- x2*(a+x2)*(1-x2) - y2 + (1 - alpha)*g*(x2 - x) + z
dy2 <- b*x2 - c*y2
# return the rate of change
list(c(dx, dy, dx2, dy2))
})
}
ode(y = state, times, func = FN, parameters)
parameters
ode(y = state, times, func = FN, parameters)
out <- ode(y = state, times, func = FN, parameters)
ode(y = state, times, func = FN, parameters)
out
ode(state, times, func = FN, parameters)
y
time <- seq(0, t, by = 0.01)
parms <- c(a=a, b=b, c=c, alpha=alpha, g=g, z=z)
y <- c(x = xi[1], y = yi[1], x2 = xi2[1], y2 = yi2[1])
y
ode(y, time, FN, parms)
FN <- function(time, y, parms) {
with(as.list(c(state, parameters)), {
#rate of change
dx <- x*(a+x)*(1-x) - y + (1 - alpha)*g*(x - x2) + z
dy <- b*x - c*y
dx2 <- x2*(a+x2)*(1-x2) - y2 + (1 - alpha)*g*(x2 - x) + z
dy2 <- b*x2 - c*y2
# return the rate of change
list(c(dx, dy, dx2, dy2))
})
}
ode(y, time, FN, parms)
y
parms
time <- seq(0, t, by = 0.01)
parms <- c(a=a, b=b, c=c, alpha=alpha, g=g, z=0.05)
y <- c(x = xi[1], y = yi[1], x2 = xi2[1], y2 = yi2[1])
ode(y, time, FN, parms)
FN <- function(time, y, parms) {
with(as.list(c(y, parms)), {
#rate of change
dx <- x*(a+x)*(1-x) - y + (1 - alpha)*g*(x - x2) + z
dy <- b*x - c*y
dx2 <- x2*(a+x2)*(1-x2) - y2 + (1 - alpha)*g*(x2 - x) + z
dy2 <- b*x2 - c*y2
# return the rate of change
list(c(dx, dy, dx2, dy2))
})
}
ode(y, time, FN, parms)
out <- ode(y, time, FN, parms)
head(out)
FN <- function(time, y, parms) {
with(as.list(c(y, parms)), {
if(time < 0.5){
z <- 0.05
} else {
z <- 0
}
#rate of change
dx <- x*(a+x)*(1-x) - y + (1 - alpha)*g*(x - x2) + z
dy <- b*x - c*y
dx2 <- x2*(a+x2)*(1-x2) - y2 + (1 - alpha)*g*(x2 - x) + z
dy2 <- b*x2 - c*y2
# return the rate of change
list(c(dx, dy, dx2, dy2))
})
}
out <- ode(y, time, FN, parms)
out
out <- as.data.frame(ode(y, time, FN, parms))
out
colnames(out)
r <- as.data.frame(ode(y, time, FN, parms))
colnames(r) <- c("ti", "xi", "yi", "xi2", "yi2")
head(r)
runApp()
runApp()
runApp()
x <- r
x %>% ggvis(~ti, ~xi) %>% layer_points(size := 10, stroke := "red") %>% layer_points(data = x, x = ~ti, y = ~yi, size := 10, stroke := "blue") %>% add_axis("y", title = "X") %>% scale_numeric("y", domain = c(-2, 2), nice = FALSE, clamp = TRUE) %>% add_axis("x", title = " ") %>% add_axis("x", orient = "top", ticks = 0, title = "Neuron 1", properties = axis_props(axis = list(stroke = "white"),labels = list(fontSize = 0)))
time = 0.0
time = 0.03
z <- 10
if(time < 0.5){
z <- z
} else {
z <- 0
}
z
ode(y, time, FN, parms)
time <- seq(0, t, by = 0.01)
ode(y, time, FN, parms)
y <- ode(y, time, FN, parms)
u <- ode(y, time, FN, parms)
y <- c(x = xi[1], y = yi[1], x2 = xi2[1], y2 = yi2[1])
u <- ode(y, time, FN, parms)
head(u)
runApp()
runApp()
runApp()
runApp()
runApp()
time <- seq(0, t, by = 0.01)
parms <- c(a=a, b=b, c=c, alpha=alpha, g=g, z=z) # NEED TO ADJUST THIS Z
y <- c(x = xi[1], y = yi[1], x2 = xi2[1], y2 = yi2[1], t = 0)
y
parms
time
parms
parms <- c(a=a, b=b, c=c, alpha=alpha, g=g, z=0.05)
r <- as.data.frame(ode(y, time, FN, parms))
colnames(r) <- c("ti", "xi", "yi", "xi2", "yi2", "t")
y
FN <- function(time, y, parms) {
with(as.list(c(y, parms)), {
if(t < 0.5){
z <- z
} else {
z <- 0
}
#rate of change
dx <- x*(a+x)*(1-x) - y + (1 - alpha)*g*(x - x2) + z
dy <- b*x - c*y
dx2 <- x2*(a+x2)*(1-x2) - y2 + (1 - alpha)*g*(x2 - x) + z
dy2 <- b*x2 - c*y2
dt <- 0.01
# return the rate of change
list(c(dx, dy, dx2, dy2, t))
})
}
y
r <- as.data.frame(ode(y, time, FN, parms))
colnames(r) <- c("ti", "xi", "yi", "xi2", "yi2", "t")
head(r)
head(r, 10)
head(r, 20)
y <- c(x = xi[1], y = yi[1], x2 = xi2[1], y2 = yi2[1], t = 1)
r <- as.data.frame(ode(y, time, FN, parms))
colnames(r) <- c("ti", "xi", "yi", "xi2", "yi2", "t")
head(r)
FN <- function(time, y, parms) {
with(as.list(c(y, parms)), {
if(r < 0.5){
z <- z
} else {
z <- 0
}
#rate of change
dx <- x*(a+x)*(1-x) - y + (1 - alpha)*g*(x - x2) + z
dy <- b*x - c*y
dx2 <- x2*(a+x2)*(1-x2) - y2 + (1 - alpha)*g*(x2 - x) + z
dy2 <- b*x2 - c*y2
dr <- 0.01
# return the rate of change
list(c(dx, dy, dx2, dy2, r))
})
}
################ NEW !!! #################
time <- seq(0, t, by = 0.01)
parms <- c(a=a, b=b, c=c, alpha=alpha, g=g, z=z) # NEED TO ADJUST THIS Z
y <- c(x = xi[1], y = yi[1], x2 = xi2[1], y2 = yi2[1], r = 0)
z
z <- 0.05
FN <- function(time, y, parms) {
with(as.list(c(y, parms)), {
if(r < 0.5){
z <- z
} else {
z <- 0
}
#rate of change
dx <- x*(a+x)*(1-x) - y + (1 - alpha)*g*(x - x2) + z
dy <- b*x - c*y
dx2 <- x2*(a+x2)*(1-x2) - y2 + (1 - alpha)*g*(x2 - x) + z
dy2 <- b*x2 - c*y2
dr <- 0.01
# return the rate of change
list(c(dx, dy, dx2, dy2, r))
})
}
################ NEW !!! #################
time <- seq(0, t, by = 0.01)
parms <- c(a=a, b=b, c=c, alpha=alpha, g=g, z=z) # NEED TO ADJUST THIS Z
y <- c(x = xi[1], y = yi[1], x2 = xi2[1], y2 = yi2[1], r = 0)
r <- as.data.frame(ode(y, time, FN, parms))
colnames(r) <- c("ti", "xi", "yi", "xi2", "yi2", "t")
head(r)
FN <- function(time, y, parms) {
with(as.list(c(y, parms)), {
if(r < 0.5){
z <- z
} else {
z <- 0
}
#rate of change
dx <- x*(a+x)*(1-x) - y + (1 - alpha)*g*(x - x2) + z
dy <- b*x - c*y
dx2 <- x2*(a+x2)*(1-x2) - y2 + (1 - alpha)*g*(x2 - x) + z
dy2 <- b*x2 - c*y2
dr <- 0.01
# return the rate of change
list(c(dx, dy, dx2, dy2, r))
})
}
################ NEW !!! #################
time <- seq(0, t, by = 0.01)
parms <- c(a=a, b=b, c=c, alpha=alpha, g=g, z=z) # NEED TO ADJUST THIS Z
y <- c(x = xi[1], y = yi[1], x2 = xi2[1], y2 = yi2[1], r = 1)
head(r)
r <- as.data.frame(ode(y, time, FN, parms))
colnames(r) <- c("ti", "xi", "yi", "xi2", "yi2", "t")
head(r)
runApp()
