library(rvest)
library(tm)
f1u <- function(x) {ifelse ((abs(x) >  3 & abs(x) <= 7), 3*sqrt(1-(x/7)^2), 0)}
f1d <- function(x) {ifelse ((abs(x) >= 4 & abs(x) <= 7), -3*sqrt(1-(x/7)^2), 0)}
f2u <- function(x) {ifelse ((abs(x) > 0.50 & abs(x) < 0.75),  3*abs(x)+0.75, 0)}
f2d <- function(x) {ifelse ((abs(x) > -4 & abs(x) < 4), abs(x/2)-(3*sqrt(33)-7)*x^2/112-3 + sqrt(1-(abs(abs(x)-2)-1)^2), 0)}
f3u <- function(x) {ifelse ((x > -0.5 & x < 0.5), 2.25, 0)}
f4u <- function(x) {ifelse ((abs(x) >  1 & abs(x) <= 3), 6 * sqrt(10)/7 + (1.5 - 0.5 * abs(x)) * sqrt(abs(abs(x)-1)/(abs(x)-1)) - 6 * sqrt(10) * sqrt(4-(abs(x)-1)^2)/14, 0)}
f5u <- function(x) {ifelse ((abs(x) >= 0.75 & abs(x) <= 1), 9-8*abs(x), 0)}
fu <- function (x) f1u(x)+f2u(x)+f3u(x)+f4u(x)+f5u(x)
fd <- function (x) f1d(x)+f2d(x)
batman <- function(r,x) {ifelse(r%%2==0, fu(x), fd(x))}
data.frame(x=seq(from=-7, to=7, by=0.125)) %>%
mutate(y=batman(row_number(), x)) -> df
html("https://en.wikipedia.org/wiki/Batman") %>%
html_nodes("#bodyContent")  %>%
html_text() %>%
VectorSource() %>%
Corpus() %>%
tm_map(tolower) %>%
tm_map(removePunctuation) %>%
tm_map(removeNumbers) %>%
tm_map(stripWhitespace) %>%
tm_map(removeWords, c(stopwords(kind = "en"), "batman", "batmans")) %>%
DocumentTermMatrix() %>%
as.matrix() %>%
colSums() %>%
sort(decreasing=TRUE) %>%
head(n=nrow(df)) %>%
attr("names") -> df$word
m1=mPlot(x = "x",  y = "y",  data = df,  type = "Line")
m1$set(pointSize = 5,
lineColors = c('black', 'black'),
width = 900,
height = 500,
hoverCallback = "#! function(index, options, content)
{ var row = options.data[index]
return '<b>' + row.word + '</b>'} !#",
lineWidth = 2,
grid=FALSE,
axes=FALSE)
m1
m1$save('Batman.html', standalone = TRUE)
setwd("repos/cad_grs/assets/out/")
library(dplyr)
library(data.frame)
library(fmsb)
var <- list()
cohorts <- list()
reg <- list()
pred <- list()
perf <- list()
for(i in list.files()){
cohorts[[i]] <- read.table(i, h = T)
#correct col names, some of them are different
colnames(cohorts[[i]])[colnames(cohorts[[i]]) == "case"] = "cad"
reg[[i]] <- glm(cad ~ SCORE + pc1 + pc2, cohorts[[i]], family = "binomial")
var[[i]] <- NagelkerkeR2(reg[[i]])$R2
### Predicting ROC
pred[[i]] <- prediction(reg[[i]]$fitted.values, cohorts[[i]]$cad[!is.na(cohorts[[i]]$cad)])
perf[[i]] <- performance(pred[[i]], measure = "tpr", x.measure = "fpr")
plot(perf[[i]], col = rainbow(10), main = i)
abline(0,1)
text(0.2, 0.85, paste0(expression("R2 = "), round(var[[i]], 4)))
}
install.packages("data.table")
install.packages("fsmb")
install.packages("fmsb")
library(dplyr)
library(data.frame)
library(fmsb)
var <- list()
cohorts <- list()
reg <- list()
pred <- list()
perf <- list()
for(i in list.files()){
cohorts[[i]] <- read.table(i, h = T)
#correct col names, some of them are different
colnames(cohorts[[i]])[colnames(cohorts[[i]]) == "case"] = "cad"
reg[[i]] <- glm(cad ~ SCORE + pc1 + pc2, cohorts[[i]], family = "binomial")
var[[i]] <- NagelkerkeR2(reg[[i]])$R2
### Predicting ROC
pred[[i]] <- prediction(reg[[i]]$fitted.values, cohorts[[i]]$cad[!is.na(cohorts[[i]]$cad)])
perf[[i]] <- performance(pred[[i]], measure = "tpr", x.measure = "fpr")
plot(perf[[i]], col = rainbow(10), main = i)
abline(0,1)
text(0.2, 0.85, paste0(expression("R2 = "), round(var[[i]], 4)))
}
i <- 1
cohorts[[i]] <- read.table(i, h = T)
i <- listfiles()
i <- listfiles()[1]
i <- list.files()[1]
i
cohorts[[i]] <- read.table(i, h = T)
cohorts[[1]]
colnames(cohorts[[i]])[colnames(cohorts[[i]]) == "case"] = "cad"
reg[[i]] <- glm(cad ~ SCORE + pc1 + pc2, cohorts[[i]], family = "binomial")
i
y <- read.table(i, h = t)
y <- read.table(i, h = T)
for(k in c("CCGB_2", "DUKE_2", "ITH_2", "OHGS_C2", "OHGS_A2", "OHGS_B2")){ print(k)}
for(i in list.files()){
cohorts[[i]] <- read.table(i, h = T)
#correct col names, some of them are different
colnames(cohorts[[i]])[colnames(cohorts[[i]]) == "case"] = "cad"
reg[[i]] <- glm(cad ~ SCORE + pc1 + pc2, cohorts[[i]], family = "binomial")
var[[i]] <- NagelkerkeR2(reg[[i]])$R2
### Predicting ROC
pred[[i]] <- prediction(reg[[i]]$fitted.values, cohorts[[i]]$cad[!is.na(cohorts[[i]]$cad)])
perf[[i]] <- performance(pred[[i]], measure = "tpr", x.measure = "fpr")
plot(perf[[i]], col = rainbow(10), main = i)
abline(0,1)
text(0.2, 0.85, paste0(expression("R2 = "), round(var[[i]], 4)))
}
var <- list()
cohorts <- list()
reg <- list()
pred <- list()
perf <- list()
for(i in list.files()){
cohorts[[i]] <- read.table(i, h = T)
#correct col names, some of them are different
colnames(cohorts[[i]])[colnames(cohorts[[i]]) == "case"] = "cad"
reg[[i]] <- glm(cad ~ score + pc1 + pc2, cohorts[[i]], family = "binomial")
var[[i]] <- NagelkerkeR2(reg[[i]])$R2
### Predicting ROC
pred[[i]] <- prediction(reg[[i]]$fitted.values, cohorts[[i]]$cad[!is.na(cohorts[[i]]$cad)])
perf[[i]] <- performance(pred[[i]], measure = "tpr", x.measure = "fpr")
plot(perf[[i]], col = rainbow(10), main = i)
abline(0,1)
text(0.2, 0.85, paste0(expression("R2 = "), round(var[[i]], 4)))
}
library(dplyr)
library(data.frame)
library(fmsb)
install.packages(data.frame)
install.packages("data.frame")
library(ROCR)
install.packages("ROCR")
library(ROCR)
var <- list()
cohorts <- list()
reg <- list()
pred <- list()
perf <- list()
for(i in list.files()){
cohorts[[i]] <- read.table(i, h = T)
#correct col names, some of them are different
colnames(cohorts[[i]])[colnames(cohorts[[i]]) == "case"] = "cad"
reg[[i]] <- glm(cad ~ score + pc1 + pc2, cohorts[[i]], family = "binomial")
var[[i]] <- NagelkerkeR2(reg[[i]])$R2
### Predicting ROC
pred[[i]] <- prediction(reg[[i]]$fitted.values, cohorts[[i]]$cad[!is.na(cohorts[[i]]$cad)])
perf[[i]] <- performance(pred[[i]], measure = "tpr", x.measure = "fpr")
plot(perf[[i]], col = rainbow(10), main = i)
abline(0,1)
text(0.2, 0.85, paste0(expression("R2 = "), round(var[[i]], 4)))
}
reg[[1]]
summary(reg[[1]])
summary(reg[[2]])
summary(reg[[3]])
summary(reg[[4]])
summary(reg[[5]])
summary(reg[[6]])
for(i in list.files()){
cohorts[[i]] <- read.table(i, h = T)
#correct col names, some of them are different
colnames(cohorts[[i]])[colnames(cohorts[[i]]) == "case"] = "cad"
reg[[i]] <- glm(cad ~ score + pc1 + pc2, cohorts[[i]], family = "binomial")
var[[i]] <- NagelkerkeR2(reg[[i]])$R2
### Predicting ROC
pred[[i]] <- prediction(reg[[i]]$fitted.values, cohorts[[i]]$cad[!is.na(cohorts[[i]]$cad)])
perf[[i]] <- performance(pred[[i]], measure = "tpr", x.measure = "fpr")
plot(perf[[i]], col = rainbow(10), main = i)
abline(0,1)
text(0.2, 0.85, paste0(expression("R2 = "), round(var[[i]], 4)))
}
for(i in list.files()){
cohorts[[i]] <- read.table(i, h = T)
#correct col names, some of them are different
colnames(cohorts[[i]])[colnames(cohorts[[i]]) == "case"] = "cad"
reg[[i]] <- glm(cad ~ score + pc1 + pc2, cohorts[[i]], family = "binomial")
var[[i]] <- NagelkerkeR2(reg[[i]])$R2
### Predicting ROC
pred[[i]] <- prediction(reg[[i]]$fitted.values, cohorts[[i]]$cad[!is.na(cohorts[[i]]$cad)])
perf[[i]] <- performance(pred[[i]], measure = "tpr", x.measure = "fpr")
plot(perf[[i]], col = rainbow(10), main = i)
abline(0,1)
text(0.2, 0.85, paste0(expression("R2 = "), round(var[[i]], 4)))
}
library(dplyr)
library(data.frame)
library(fmsb)
library(ROCR)
var <- list()
cohorts <- list()
reg <- list()
pred <- list()
perf <- list()
for(i in list.files()){
cohorts[[i]] <- read.table(i, h = T)
#correct col names, some of them are different
colnames(cohorts[[i]])[colnames(cohorts[[i]]) == "case"] = "cad"
reg[[i]] <- glm(cad ~ SCORE + pc1 + pc2, cohorts[[i]], family = "binomial")
var[[i]] <- NagelkerkeR2(reg[[i]])$R2
### Predicting ROC
pred[[i]] <- prediction(reg[[i]]$fitted.values, cohorts[[i]]$cad[!is.na(cohorts[[i]]$cad)])
perf[[i]] <- performance(pred[[i]], measure = "tpr", x.measure = "fpr")
plot(perf[[i]], col = rainbow(10), main = i)
abline(0,1)
text(0.2, 0.85, paste0(expression("R2 = "), round(var[[i]], 4)))
}
perf[[i]]
auc <- list()
for(i in list.files()){
cohorts[[i]] <- read.table(i, h = T)
#correct col names, some of them are different
colnames(cohorts[[i]])[colnames(cohorts[[i]]) == "case"] = "cad"
reg[[i]] <- glm(cad ~ SCORE + pc1 + pc2, cohorts[[i]], family = "binomial")
var[[i]] <- NagelkerkeR2(reg[[i]])$R2
### Predicting ROC
pred[[i]] <- prediction(reg[[i]]$fitted.values, cohorts[[i]]$cad[!is.na(cohorts[[i]]$cad)])
perf[[i]] <- performance(pred[[i]], measure = "tpr", x.measure = "fpr")
auc[[i]] <- performance(pred[[i]], measure = "auc")
plot(perf[[i]], col = rainbow(10), main = i)
abline(0,1)
text(0.2, 0.85, paste0(expression("R2 = "), round(var[[i]], 4)))
}
auc
auc[[1]]
auc[[1]][1]
auc[[1]]@y.values
var <- list()
cohorts <- list()
reg <- list()
pred <- list()
perf <- list()
auc <- list()
for(i in list.files()){
cohorts[[i]] <- read.table(i, h = T)
#correct col names, some of them are different
colnames(cohorts[[i]])[colnames(cohorts[[i]]) == "case"] = "cad"
reg[[i]] <- glm(cad ~ SCORE + pc1 + pc2, cohorts[[i]], family = "binomial")
var[[i]] <- NagelkerkeR2(reg[[i]])$R2
### Predicting ROC
pred[[i]] <- prediction(reg[[i]]$fitted.values, cohorts[[i]]$cad[!is.na(cohorts[[i]]$cad)])
perf[[i]] <- performance(pred[[i]], measure = "tpr", x.measure = "fpr")
auc[[i]] <- performance(pred[[i]], measure = "auc")
plot(perf[[i]], col = rainbow(10), main = i)
abline(0,1)
text(0.2, 0.85, paste0(expression("R2 = "), round(var[[i]], 4), ", AUC = ", auc[[i]]@y.values))
}
for(i in list.files()){
cohorts[[i]] <- read.table(i, h = T)
#correct col names, some of them are different
colnames(cohorts[[i]])[colnames(cohorts[[i]]) == "case"] = "cad"
reg[[i]] <- glm(cad ~ SCORE + pc1 + pc2, cohorts[[i]], family = "binomial")
var[[i]] <- NagelkerkeR2(reg[[i]])$R2
### Predicting ROC
pred[[i]] <- prediction(reg[[i]]$fitted.values, cohorts[[i]]$cad[!is.na(cohorts[[i]]$cad)])
perf[[i]] <- performance(pred[[i]], measure = "tpr", x.measure = "fpr")
auc[[i]] <- performance(pred[[i]], measure = "auc")
plot(perf[[i]], col = rainbow(10), main = i)
abline(0,1)
text(0.2, 0.85, paste0(expression("R2 = "), round(var[[i]], 4), ", AUC = ", round(auc[[i]]@y.values), 4))
}
round(auc[[i]]@y.values), 4)
round(auc[[i]]@y.values, 4)
for(i in list.files()){
cohorts[[i]] <- read.table(i, h = T)
#correct col names, some of them are different
colnames(cohorts[[i]])[colnames(cohorts[[i]]) == "case"] = "cad"
reg[[i]] <- glm(cad ~ SCORE + pc1 + pc2, cohorts[[i]], family = "binomial")
var[[i]] <- NagelkerkeR2(reg[[i]])$R2
### Predicting ROC
pred[[i]] <- prediction(reg[[i]]$fitted.values, cohorts[[i]]$cad[!is.na(cohorts[[i]]$cad)])
perf[[i]] <- performance(pred[[i]], measure = "tpr", x.measure = "fpr")
auc[[i]] <- performance(pred[[i]], measure = "auc")
plot(perf[[i]], col = rainbow(10), main = i)
abline(0,1)
text(0.2, 0.85, paste0(expression("R2 = "), round(var[[i]], 4), ", AUC = ", round(auc[[i]]@y.values, 4))
}
auc[[i]]@y.values
as.double(auc[[i]]@y.values)
for(i in list.files()){
cohorts[[i]] <- read.table(i, h = T)
#correct col names, some of them are different
colnames(cohorts[[i]])[colnames(cohorts[[i]]) == "case"] = "cad"
reg[[i]] <- glm(cad ~ SCORE + pc1 + pc2, cohorts[[i]], family = "binomial")
var[[i]] <- NagelkerkeR2(reg[[i]])$R2
### Predicting ROC
pred[[i]] <- prediction(reg[[i]]$fitted.values, cohorts[[i]]$cad[!is.na(cohorts[[i]]$cad)])
perf[[i]] <- performance(pred[[i]], measure = "tpr", x.measure = "fpr")
auc[[i]] <- performance(pred[[i]], measure = "auc")
plot(perf[[i]], col = rainbow(10), main = i)
abline(0,1)
text(0.2, 0.85, paste0(expression("R2 = "), round(var[[i]], 4), ", AUC = ", round(as.double(auc[[i]]@y.values), 4))
}
for(i in list.files()){
cohorts[[i]] <- read.table(i, h = T)
#correct col names, some of them are different
colnames(cohorts[[i]])[colnames(cohorts[[i]]) == "case"] = "cad"
reg[[i]] <- glm(cad ~ SCORE + pc1 + pc2, cohorts[[i]], family = "binomial")
var[[i]] <- NagelkerkeR2(reg[[i]])$R2
### Predicting ROC
pred[[i]] <- prediction(reg[[i]]$fitted.values, cohorts[[i]]$cad[!is.na(cohorts[[i]]$cad)])
perf[[i]] <- performance(pred[[i]], measure = "tpr", x.measure = "fpr")
auc[[i]] <- performance(pred[[i]], measure = "auc")
plot(perf[[i]], col = rainbow(10), main = i)
abline(0,1)
text(0.2, 0.85, paste0(expression("R2 = "), round(var[[i]], 4), ", AUC = ", round(as.double(auc[[i]]@y.values), 4)))
}
?reclassification
ui <- bootstrapPage(
sliderInput("slider", label='a number', min=100, max=400, value = 150),
plotOutput("plot")
)
server <- function(input, output, session) {
observeEvent(input$slider > 200, {
output$plot <- renderPlot(plot(rnorm(10000), rnorm(10000)))
})
}
shinyApp(ui, server)
library(shiny)
ui <- bootstrapPage(
sliderInput("slider", label='a number', min=100, max=400, value = 150),
plotOutput("plot")
)
server <- function(input, output, session) {
observeEvent(input$slider > 200, {
output$plot <- renderPlot(plot(rnorm(10000), rnorm(10000)))
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
observeEvent(input$slider, {
output$plot <- renderPlot(plot(rnorm(10000), rnorm(10000)))
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
sliderInput("slider", label='a number', min=100, max=400, value = 150),
plotOutput("plot")
)
server <- function(input, output, session) {
observeEvent(input$slider, {
if(input$slider > 200){
output$plot <- renderPlot(plot(rnorm(10000), rnorm(10000)))
}
})
}
shinyApp(ui, server)
plot()
frame()
ui <- bootstrapPage(
sliderInput("slider", label='a number', min=100, max=400, value = 150),
plotOutput("plot")
)
server <- function(input, output, session) {
observeEvent(input$slider, {
if(input$slider > 200){
output$plot <- renderPlot(plot(rnorm(10000), rnorm(10000)))
} else {
frame()
}
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
sliderInput("slider", label='a number', min=100, max=400, value = 150),
plotOutput("plot")
)
server <- function(input, output, session) {
observeEvent(input$slider, {
if(input$slider > 200){
output$plot <- renderPlot(plot(rnorm(10000), rnorm(10000)))
print(input$slider)
} else {
frame()
}
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
sliderInput("slider", label='a number', min=100, max=400, value = 150),
plotOutput("plot")
)
server <- function(input, output, session) {
slider_values <- list()
observeEvent(input$slider, {
slider_values <- c(slider_values, input$slider)
if(slidere_values[length(slider_values)] > 200){
output$plot <- renderPlot(plot(rnorm(10000), rnorm(10000)))
print(input$slider)
} else {
frame()
}
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
sliderInput("slider", label='a number', min=100, max=400, value = 150),
plotOutput("plot")
)
server <- function(input, output, session) {
slider_values <- list()
observeEvent(input$slider, {
slider_values <- c(slider_values, input$slider)
if(slider_values[length(slider_values)] > 200){
output$plot <- renderPlot(plot(rnorm(10000), rnorm(10000)))
print(input$slider)
} else {
frame()
}
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
sliderInput("slider", label='a number', min=100, max=400, value = 150),
plotOutput("plot")
)
server <- function(input, output, session) {
slider_values <- list()
observeEvent(input$slider, {
slider_values <- c(slider_values, input$slider)
if(slider_values[length(slider_values)] > 200){
output$plot <- renderPlot(plot(rnorm(10000), rnorm(10000)))
print(slider_values)
} else {
frame()
}
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
sliderInput("slider", label='a number', min=100, max=400, value = 150),
plotOutput("plot")
)
server <- function(input, output, session) {
observeEvent(input$slider, {
slider_values <- c(slider_values, input$slider)
if(slider_values[length(slider_values)] > 200){
output$plot <- renderPlot(plot(rnorm(10000), rnorm(10000)))
print(slider_values)
} else {
frame()
}
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
sliderInput("slider", label='a number', min=100, max=400, value = 150),
plotOutput("plot")
)
server <- function(input, output, session) {
slider_values <- c(slider_values, input$slider)
observeEvent(input$slider, {
if(slider_values[length(slider_values)] > 200){
output$plot <- renderPlot(plot(rnorm(10000), rnorm(10000)))
print(slider_values)
} else {
frame()
}
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
sliderInput("slider", label='a number', min=100, max=400, value = 150),
plotOutput("plot")
)
server <- function(input, output, session) {
slider_values <- list(slider_values, input$slider)
observeEvent(input$slider, {
if(slider_values[length(slider_values)] > 200){
output$plot <- renderPlot(plot(rnorm(10000), rnorm(10000)))
print(slider_values)
} else {
frame()
}
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
sliderInput("slider", label='a number', min=100, max=400, value = 150),
plotOutput("plot")
)
server <- function(input, output, session) {
slider_values <- list(0, input$slider)
observeEvent(input$slider, {
if(slider_values[length(slider_values)] > 200){
output$plot <- renderPlot(plot(rnorm(10000), rnorm(10000)))
print(slider_values)
} else {
frame()
}
})
}
shinyApp(ui, server)
library(batch)
install.packages("batch")
library(batch)
?batch
?batch()
library(shiny)
setwd(dir = "repos/modeling_final/shiny/rsconnect/")
setwd("..")
runApp()
install.packages("deSolve")
runApp()
